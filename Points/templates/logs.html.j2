{% extends "base.html.j2" %}

{% block content %}
    <body>
        <div id="data" data-logs='{{ jsonlogs }}' data-debug='{{ jsondebug }}'></div>
        <style>
            #logsInput {
                display: flex;
                justify-content: center;
            }

            #logsRange {
                width: 160px;
            }

            #logsRange,
            #logsNumber,
            #logsButton {
                display: flex;
            }

            table {
                border-collapse:collapse;
                font-size: 20px;
                background: #f2f2f2;
            }

            td {
                text-align: center;
                padding: 5px;
                border: 1px solid #8e8e8e;
            }

            tr:hover {
                background: #e8e8e8;
            }

            .code {
                font-family: Consolas, monospace;
                font-size: 14px;
                text-align: left;
            }

            .debugTable {
                width: 600px;
                margin-bottom: 10px;
            }

            .red {
                background: #ff000033;
            }
            .blue {
                background: #0000ff2b;
            }

            .debugTableActions {
                width: 600px;
                height: 25px;
            }

            .debugTableActions button {
                float: right;
                height: 100%;
                outline: 0;
                border: 1px solid #8e8e8e;
                border-bottom-width: 0;
                border-left-width: 0;
                background: #dddddd
            }

            .debugTableActions button:hover {
                background: #cacaca;
            }

            .debugTableActions button:last-child {
                border-left-width: 1;
            }
        </style>

        <table id="resultTable">
            <tr>
                <td class="red">First strategy</td>
                <td class="blue">Second strategy</td>
            </tr>
            <tr>
                <td>{{ res1 }}</td>
                <td>{{ res2 }}</td>
            </tr>
        </table>
        <svg id="logsWindow">
            {% for i in range(logs|length) %}
                <g id="canvas{{ i }}">
                    <g id="polygons{{ i }}"></g>
                    <g id="segments{{ i }}"></g>
                    <g id="points{{ i }}"></g>
                </g>
            {% endfor %}
        </svg>
        <br>
        <div id="logsInput">
            <input id="logsRange" type="range" min="0" max="0" step="1" value="0"> 
            <input id="logsNumber" type="number" min="0" max="0" value="0"> 
            <input id="logsButton" type="button" value="play">
        </div>
        <div class="debugTableActions">
            <button id="toggleAll-1">Hide All</button>
            <button id="toggleEmpty-1">Hide Empty</button>
            <button id="download-1">Download</button>
        </div>
        <table class="debugTable" id="debugTable-1">
            <tr head>
                <td colspan="2" class="red">First strategy</td>
            </tr>
            <tr>
                <td width="50">Turn</td>
                <td>Output</td>
            </tr>
            {% for i in range(debug|length // 2) %}
            <tr>
                <td>{{ 2*i }}</td>
                <td class="code">{{ debug[2*i] }}</td>
            </tr>
            {% endfor %}
        </table>
        <div class="debugTableActions">
            <button id="toggleAll-2">Hide All</button>
            <button id="toggleEmpty-2">Hide Empty</button>
            <button id="download-2">Download</button>
        </div>
        <table class="debugTable" id="debugTable-2">
            <tr head>
                <td colspan="2" class="blue">Second strategy</td>
            </tr>
            <tr>
                <td width="50">Turn</td>
                <td>Output</td>
            </tr>
            {% for i in range(debug|length // 2) %}
            <tr>
                <td>{{ 2*i + 1 }}</td>
                <td class="code">{{ debug[2*i + 1] }}</td>
            </tr>
            {% endfor %}
        </table>

        <script>
            // Debug output
            for (let i of [1, 2]) {
                let toggleAllButton = document.getElementById("toggleAll-" + i);
                let toggleEmptyButton = document.getElementById("toggleEmpty-" + i);
                let downloadButton = document.getElementById("download-" + i);
                let debugTable = document.getElementById("debugTable-" + i)

                let isAllHidden = false;
                let isEmptyHidden = false;

                function draw() {
                    if (isAllHidden) {
                        toggleAllButton.innerText = "Show all";
                        hideElem(toggleEmptyButton);
                    } else {
                        toggleAllButton.innerText = "Hide all";
                        showElem(toggleEmptyButton);
                    }
                    if (isEmptyHidden) {
                        toggleEmptyButton.innerText = "Show empty";
                    } else {
                        toggleEmptyButton.innerText = "Hide empty";
                    }
                    for (let row of debugTable.querySelectorAll("tr")) {
                        if (!row.hasAttribute("head")) {
                            if (isAllHidden | (!isAllHidden && isEmptyHidden && !isEmpty(row))) {
                                hideElem(row);
                            } else {
                                showElem(row);
                            }
                        }
                    }
                }

                function toggleAll() {
                    isAllHidden = !isAllHidden;
                    draw();
                }

                function toggleEmpty() {
                    isEmptyHidden = !isEmptyHidden;
                    draw();
                }

                function isEmpty(td) {
                    return Boolean(td.lastElementChild.innerText)
                }

                toggleAllButton.onclick = toggleAll;
                toggleEmptyButton.onclick = toggleEmpty;

                function download(filename, text) {
                    // Taken from https://ourcodeworld.com/articles/read/189/how-to-create-a-file-and-generate-a-download-with-javascript-in-the-browser-without-a-server
                    var element = document.createElement('a');
                    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
                    element.setAttribute('download', filename);

                    element.style.display = 'none';
                    document.body.appendChild(element);

                    element.click();

                    document.body.removeChild(element);
                }

                function downloadLogs() {
                    let filename = "PointsLog.json";
                    let text = JSON.stringify(
                        {
                            fieldLog: JSON.parse(document.getElementById('data').dataset.logs),
                            outputLog: JSON.parse(document.getElementById('data').dataset.debug)
                        });
                    download(filename, text);
                }

                downloadButton.onclick = downloadLogs;
            }

            function hideElem(elem) {
                elem.style.display = "none";
            }

            function showElem(elem) {
                elem.style.display = "";
            }

            // Field drawing
            let svgNS = "http://www.w3.org/2000/svg";
            let xlinkNS = "http://www.w3.org/1999/xlink";

            let gridStep = 30;

            let pointColor = {R: "red", G: "blue", '.': "#c2c2c2"};
            let segmentColor = {R: "red", G: "blue"};
            let polygonColor = {R: "#ffc4c4", G: "#cdcdff"}

            let resultTable = document.getElementById("resultTable");
            let logsWindow = document.getElementById("logsWindow");
            let logsRange = document.getElementById("logsRange");
            let logsNumber = document.getElementById("logsNumber");
            let logsButton = document.getElementById("logsButton");

            let logs = JSON.parse(document.getElementById('data').dataset.logs);

            for (let i = 0; i < logs.length; i++) {
                drawField(document.getElementById('canvas' + i),
                          document.getElementById('polygons' + i),
                          document.getElementById('segments' + i),
                          document.getElementById('points' + i), logs[i]);
                hideGroup(i);
            }

            logsRange.setAttribute("max", logs.length - 1);
            logsNumber.setAttribute("max", logs.length - 1);
            let active = 0; showGroup(active);
            let isPlay = false;
            logsRange.oninput = function() {
                hideGroup(active);
                active = logsRange.value;
                showGroup(active);
                logsNumber.value = active;
                isPlay = false;
            }
            logsNumber.oninput = function() {
                hideGroup(active);
                active = logsNumber.value;
                showGroup(active);
                logsRange.value = active;
                isPlay = false;
            }
            logsButton.onclick = play;

            function animate({timing, draw, duration}) {
                // Taken from https://learn.javascript.ru
                let start = performance.now();

                    requestAnimationFrame(function animate(time) {
                    // timeFraction изменяется от 0 до 1
                    let timeFraction = (time - start) / duration;
                    if (timeFraction > 1) timeFraction = 1;

                    // вычисление текущего состояния анимации
                    let progress = timing(timeFraction);

                    draw(progress); // отрисовать её

                    if (timeFraction < 1) {
                       requestAnimationFrame(animate);
                    }
                });
            }

            function play() {
                isPlay = true;
                let nowProgress = active / (logs.length - 1);

                let duration = 3000 * (1 - nowProgress);
                let timing = time => {
                    return nowProgress + time * (1 - nowProgress);
                };
                let draw = progress => {
                    if (isPlay) {
                        hideGroup(active);
                        active = Math.trunc(progress * (logs.length - 1));
                        showGroup(active);
                        logsNumber.value = active;
                        logsRange.value = active;
                    }
                }
                animate({timing, draw, duration});
            }

            function showGroup(i) {
                let group = document.getElementById("canvas" + i);
                if (group) group.setAttribute("visibility", "visible");
            }

            function hideGroup(i) {
                let group = document.getElementById("canvas" + i);
                if (group) group.setAttribute("visibility", "hidden");
            }
       
            function len(x) {
                return x.length;
            }

            function addElement(parent, tag, opt, NS = svgNS) {
                let elem = document.createElementNS(NS, tag);
                for (let prop in opt) {
                    elem.setAttribute(prop, opt[prop]);
                }
                parent.append(elem);
                return elem;
            }

            function drawField(canvas, polygons, segments, points, field) {
                let sizeX = len(field);
                let sizeY = len(field[0]);

            logsWindow.style.width = (sizeX + 1) * gridStep;
            logsWindow.style.height = (sizeY + 1) * gridStep;
            logsInput.style.width = (sizeX + 1) * gridStep;
            resultTable.style.width = (sizeX + 1) * gridStep;

                function drawPoint(x, y, c) {
                    addElement(points, "circle", {
                        cx: (x + 1) * gridStep,
                        cy: (y + 1) * gridStep,
                        r: 4, fill: pointColor[c]
                    });
                }

                function drawSegment(x1, y1, x2, y2, c) {
                    [x1, x2] = [x1, x2].map(x => (x + 1) * gridStep);
                    [y1, y2] = [y1, y2].map(y => (y + 1) * gridStep);
                    addElement(segments, 'line', {
                        x1, y1, x2, y2,
                        stroke: segmentColor[c], 'stroke-width': 1
                    })
                }

                function drawPolygon(x1, y1, x2, y2, x3, y3, c) {
                    [x1, x2, x3] = [x1, x2, x3].map(x => (x + 1) * gridStep);
                    [y1, y2, y3] = [y1, y2, y3].map(y => (y + 1) * gridStep);
                    addElement(polygons, "polygon", {
                        points: `${x1},${y1} ${x2},${y2} ${x3},${y3}`,
                        fill: polygonColor[c],
                        stroke:polygonColor[c],
                        "stroke-width": 1
                    })
                }

                function pointsCount(i, j, c) {
                    return [[i, j], [i+1, j], [i, j+1], [i+1, j+1]].filter(x => field[x[0]][x[1]] == c).length;
                }

                for (let i = 0; i < sizeX - 1; i++) {
                    for (let j = 0; j < sizeY - 1; j++) {
                        for (let c of ['R', 'G']) {
                            let points = [field[i][j], field[i+1][j], field[i][j+1], field[i+1][j+1]];
                            let cPoints = [[i, j], [i+1, j], [i, j+1], [i+1, j+1]].filter(x => field[x[0]][x[1]] == c);
                            let otherPoints = [[i, j], [i+1, j], [i, j+1], [i+1, j+1]].filter(x => !(field[x[0]][x[1]] == c));
                            let count = cPoints.length;
                            if (count == 4) {
                                drawPolygon(i, j, i+1, j, i+1, j+1, c);
                                drawPolygon(i, j, i, j+1, i+1, j+1, c);
                            }
                            if (count == 3) {
                                [p0, p1, p2] = cPoints;
                                drawPolygon(...p0, ...p1, ...p2, c);
                                let p = otherPoints[0];
                                drawSegment(p[0], (2*j+1 - p[1]), (2*i+1 - p[0]), p[1], c);
                            }
                            if (count >= 3) {
                                if (i == 0 && field[i][j] == c && field[i][j+1] == c) {
                                    drawSegment(i, j, i, j+1, c);
                                }
                                if (i+1 == sizeX-1 && field[i+1][j] == c && field[i+1][j+1] == c) {
                                    drawSegment(i+1, j, i+1, j+1, c);
                                }
                                if (j == 0 && field[i][j] == c && field[i+1][j] == c) {
                                    drawSegment(i, j, i+1, j, c);
                                }
                                if (j+1 == sizeY-1 && field[i][j+1] == c && field[i+1][j+1] == c) {
                                    drawSegment(i, j+1, i+1, j+1, c);
                                }
                            }
                            if (count == 2) {
                                [p0, p1] = cPoints 
                                console.log(p0, p1, i, j)
                                if (p0[0] == i && p1[0] == i && i != 0 && pointsCount(i-1, j, c) >= 3) {
                                    drawSegment(i, j, i, j+1, c);
                                }
                                if (p0[0] == i+1 && p1[0] == i+1 && i+1 != sizeX-1 && pointsCount(i+1, j, c) >= 3) {
                                    drawSegment(i+1, j, i+1, j+1, c);
                                }
                                if (p0[1] == j && p1[1] == j && j != 0 && pointsCount(i, j-1, c) >= 3) {
                                    drawSegment(i, j, i+1, j, c);
                                }
                                if (p0[1] == j+1 && p1[1] == j+1 && j+1 != sizeY-1 && pointsCount(i, j+1, c) >= 3) {
                                    drawSegment(i, j+1, i+1, j+1, c);
                                }
                            }
                        }
                    }
                }

                for (let i = 0; i < sizeX; i++) {
                    for (let j = 0; j < sizeY; j++) {
                        drawPoint(i, j, field[i][j], sizeX, sizeY);
                    }
                }
            }
        </script>
    </body>
{% endblock %}