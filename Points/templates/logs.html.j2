{% extends "base.html.j2" %}

{% block content %}
    <body>
        <div id="data" data-logs='{{ jsonlogs }}'></div>
        <p>First strategy: {{ res1 }}</p>
        <p>Second strategy: {{ res2 }}</p>
        <br>
        {% for i in range(logs|length) %}
            <svg id="canvas{{ i }}">
                <g id="polygons{{ i }}"></g>
                <g id="segments{{ i }}"></g>
                <g id="points{{ i }}"></g>
            </svg>
            <p></p><br>
        {% endfor %}

        <script>
            let svgNS = "http://www.w3.org/2000/svg";
            let xlinkNS = "http://www.w3.org/1999/xlink";

            let gridStep = 30;

            let pointColor = {R: "red", G: "blue", '.': "#c2c2c2"};
            let segmentColor = {R: "red", G: "blue"};
            let polygonColor = {R: "#ffc4c4", G: "#cdcdff"}

            let logs = JSON.parse(document.getElementById('data').dataset.logs);

            for (let i = 0; i < logs.length; i++) {
                drawField(document.getElementById('canvas' + i),
                          document.getElementById('polygons' + i),
                          document.getElementById('segments' + i),
                          document.getElementById('points' + i), logs[i])
            }
       
            function len(x) {
                return x.length;
            }

            function addElement(parent, tag, opt, NS = svgNS) {
                let elem = document.createElementNS(NS, tag);
                for (let prop in opt) {
                    elem.setAttribute(prop, opt[prop]);
                }
                parent.append(elem);
                return elem;
            }

            function drawField(canvas, polygons, segments, points, field) {
                let sizeX = len(field);
                let sizeY = len(field[0]);

                canvas.style.width = (sizeX + 1) * gridStep;
                canvas.style.height = (sizeY + 1) * gridStep;

                function drawPoint(x, y, c) {
                    addElement(points, "circle", {
                        cx: (x + 1) * gridStep,
                        cy: (y + 1) * gridStep,
                        r: 4, fill: pointColor[c]
                    });
                }

                function drawSegment(x1, y1, x2, y2, c) {
                    [x1, x2] = [x1, x2].map(x => (x + 1) * gridStep);
                    [y1, y2] = [y1, y2].map(y => (y + 1) * gridStep);
                    addElement(segments, 'line', {
                        x1, y1, x2, y2,
                        stroke: segmentColor[c], 'stroke-width': 1
                    })
                }

                function drawPolygon(x1, y1, x2, y2, x3, y3, c) {
                    [x1, x2, x3] = [x1, x2, x3].map(x => (x + 1) * gridStep);
                    [y1, y2, y3] = [y1, y2, y3].map(y => (y + 1) * gridStep);
                    addElement(polygons, "polygon", {
                        points: `${x1},${y1} ${x2},${y2} ${x3},${y3}`,
                        fill: polygonColor[c],
                        stroke:polygonColor[c],
                        "stroke-width": 1
                    })
                }

                function pointsCount(i, j, c) {
                    return [[i, j], [i+1, j], [i, j+1], [i+1, j+1]].filter(x => field[x[0]][x[1]] == c).length;
                }

                for (let i = 0; i < sizeX - 1; i++) {
                    for (let j = 0; j < sizeY - 1; j++) {
                        for (let c of ['R', 'G']) {
                            let points = [field[i][j], field[i+1][j], field[i][j+1], field[i+1][j+1]];
                            let cPoints = [[i, j], [i+1, j], [i, j+1], [i+1, j+1]].filter(x => field[x[0]][x[1]] == c);
                            let otherPoints = [[i, j], [i+1, j], [i, j+1], [i+1, j+1]].filter(x => !(field[x[0]][x[1]] == c));
                            let count = cPoints.length;
                            if (count == 4) {
                                drawPolygon(i, j, i+1, j, i+1, j+1, c);
                                drawPolygon(i, j, i, j+1, i+1, j+1, c);
                            }
                            if (count == 3) {
                                [p0, p1, p2] = cPoints;
                                drawPolygon(...p0, ...p1, ...p2, c);
                                let p = otherPoints[0];
                                drawSegment(p[0], (2*j+1 - p[1]), (2*i+1 - p[0]), p[1], c);
                            }
                            if (count >= 3) {
                                if (i == 0 && field[i][j] == c && field[i][j+1] == c) {
                                    drawSegment(i, j, i, j+1, c);
                                }
                                if (i+1 == sizeX-1 && field[i+1][j] == c && field[i+1][j+1] == c) {
                                    drawSegment(i+1, j, i+1, j+1, c);
                                }
                                if (j == 0 && field[i][j] == c && field[i+1][j] == c) {
                                    drawSegment(i, j, i+1, j, c);
                                }
                                if (j+1 == sizeY-1 && field[i][j+1] == c && field[i+1][j+1] == c) {
                                    drawSegment(i, j+1, i+1, j+1, c);
                                }
                            }
                            if (count == 2) {
                                [p0, p1] = cPoints 
                                console.log(p0, p1, i, j)
                                if (p0[0] == i && p1[0] == i && i != 0 && pointsCount(i-1, j, c) >= 3) {
                                    drawSegment(i, j, i, j+1, c);
                                }
                                if (p0[0] == i+1 && p1[0] == i+1 && i+1 != sizeX-1 && pointsCount(i+1, j, c) >= 3) {
                                    drawSegment(i+1, j, i+1, j+1, c);
                                }
                                if (p0[1] == j && p1[1] == j && j != 0 && pointsCount(i, j-1, c) >= 3) {
                                    drawSegment(i, j, i+1, j, c);
                                }
                                if (p0[1] == j+1 && p1[1] == j+1 && j+1 != sizeY-1 && pointsCount(i, j+1, c) >= 3) {
                                    drawSegment(i, j+1, i+1, j+1, c);
                                }
                            }
                        }
                    }
                }

                for (let i = 0; i < sizeX; i++) {
                    for (let j = 0; j < sizeY; j++) {
                        drawPoint(i, j, field[i][j], sizeX, sizeY);
                    }
                }
            }
        </script>
    </body>
{% endblock %}